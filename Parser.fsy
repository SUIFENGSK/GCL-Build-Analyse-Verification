// Open the file that defines the type "expr" we shall use as AST
%{
open AST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> IDENT
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF STRING SKIP SEMICOLON 
%token ASSIGN // LBRACK RBRACK SKIP SEMICOLON IFSTART IFEND DOSTART DOEND CONDITION
// %token TRUE FALSE AND OR ANDAND OROR NOT EQ NEQ GT GTE LT LTE
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV
%right POW


// We declare the initial non-terminal symbol
%start start
%start startCommand

// We specify the return type of each of then non-terminal symbols
%type <AST.arithmeticExpr> start
%type <AST.arithmeticExpr> arithmeticExpr0
// %type <AST.booleanExpr> startbooleanExpr
// %type <AST.booleanExpr> booleanExpr
%type <AST.command> startCommand
%type <AST.command> command
// %type <AST.guardedCommand> startGuardedCommand
// %type <AST.guardedCommand> guardedCommand

//%type <AST.expr> expression1


// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

// Task 1
arithmeticExpr0:
  | arithmeticExpr0 TIMES arithmeticExpr0 { TimesExpr($1,$3) }
  | arithmeticExpr0 DIV arithmeticExpr0 { DivExpr($1,$3) }
  | arithmeticExpr0 PLUS arithmeticExpr0 { PlusExpr($1,$3) }
  | arithmeticExpr0 MINUS arithmeticExpr0 { MinusExpr($1,$3) }
  | arithmeticExpr0 POW arithmeticExpr0 { PowExpr($1,$3) }
  | arithmeticExpr1 { $1 }
arithmeticExpr1:
  | PLUS arithmeticExpr1 { UPlusExpr($2) }
  | MINUS arithmeticExpr1 { UMinusExpr($2) }
  | NUM { Num($1) }
  | LPAR arithmeticExpr0 RPAR { $2 }
  | STRING { Str($1) }
  | STRING LPAR arithmeticExpr0 RPAR { ArrAccess($1, $3) }

// startbooleanExpr: booleanExpr EOF { $1 }

// booleanExpr:
//   | TRUE { True }
//   | FALSE { False }
//   | booleanExpr AND booleanExpr { AndExpr($1, $3) }
//   | booleanExpr OR booleanExpr { OrExpr($1, $3) }
//   | booleanExpr ANDAND booleanExpr { AndAndExpr($1, $3) }
//   | booleanExpr OROR booleanExpr { OrOrExpr($1, $3) }
//   | NOT booleanExpr { NotExpr($2) }
//   | arithmeticExpr0 EQ arithmeticExpr0 { EqExpr($1, $3) }
//   | arithmeticExpr0 NEQ arithmeticExpr0 { NeqExpr($1, $3) }
//   | arithmeticExpr0 GT arithmeticExpr0 { GtExpr($1, $3) }
//   | arithmeticExpr0 GTE arithmeticExpr0 { GteExpr($1, $3) }
//   | arithmeticExpr0 LT arithmeticExpr0 { LtExpr($1, $3) }
//   | arithmeticExpr0 LTE arithmeticExpr0 { LteExpr($1, $3) }
//   | LPAR booleanExpr RPAR { $2 }


startCommand: command EOF { $1 }
// Level 1: Commands
command:
  | IDENT ASSIGN arithmeticExpr0 { Assign($1, $3) }
  // | arithmeticExpr0 LBRACK arithmeticExpr0 RBRACK ASSIGN arithmeticExpr0 { ArrAssign($1, $3, $6) }
  | SKIP { Skip }
  | command SEMICOLON command { Seq($1, $3) }
  // | IFSTART guardedCommand IFEND { If($2) }
  // | DOSTART guardedCommand DOEND { Do($2) }

// startGuardedCommand: guardedCommand EOF { $1 }
// // Level 2: Guarded commands
// guardedCommand:
//   | booleanExpr CONDITION command { Condition($1, $3) }
//   | guardedCommand LBRACK RBRACK guardedCommand { Choice($1, $4) }


// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
