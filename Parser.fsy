// Open the file that defines the type "expr" we shall use as AST
%{
open AST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> VARNAME
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF STRING SKIP SEMICOLON 
%token ASSIGN LBRACK RBRACK IFSTART IFEND DOSTART DOEND CONDITION
%token TRUE FALSE AND OR ANDAND OROR NOT EQ NEQ GT GTE LT LTE
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV
%right POW


// We declare the initial non-terminal symbol
%start start
%start startCommand
%start startBooleanExpr
%start startGuardedCommand


// We specify the return type of each of then non-terminal symbols
%type <AST.arithmeticExpr> start
%type <AST.arithmeticExpr> arithmeticExpr0

%type <AST.booleanExpr> startBooleanExpr
%type <AST.booleanExpr> booleanExpr0

%type <AST.command> startCommand
%type <AST.command> command

%type <AST.guardedCommand> startGuardedCommand
%type <AST.guardedCommand> guardedCommand

// Grammar productions
%%
// The first production in "formal" notation is
// start -> expression
// here written:

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

//Arithmetic expressions
start: arithmeticExpr0 EOF             { $1 }
arithmeticExpr0:
    | arithmeticExpr0 PLUS arithmeticExpr1 { PlusExpr($1,$3) }
    | arithmeticExpr0 MINUS arithmeticExpr1 { MinusExpr($1,$3) }
    | arithmeticExpr1 { $1 }
arithmeticExpr1:
    | arithmeticExpr1 TIMES arithmeticExpr2 { TimesExpr($1,$3) }
    | arithmeticExpr1 DIV arithmeticExpr2 { DivExpr($1,$3) }
    | arithmeticExpr2 { $1 }
arithmeticExpr2:
    | arithmeticExpr3 POW arithmeticExpr2 { PowExpr($1,$3) }
    | arithmeticExpr3 { $1 }
arithmeticExpr3:
    | PLUS arithmeticExpr3 { UPlusExpr($2) }
    | MINUS arithmeticExpr3 { UMinusExpr($2) }
    | NUM { Num($1) }
    | LPAR arithmeticExpr0 RPAR { $2 }
    | VARNAME { Str($1) }
    | VARNAME LBRACK arithmeticExpr0 RBRACK { ArrAccess($1, $3) }

// Commands
startCommand: command EOF { $1 }
// Level 1: Commands
command:
  | VARNAME ASSIGN arithmeticExpr0 { Assign($1, $3) }
  | VARNAME LBRACK arithmeticExpr0 RBRACK ASSIGN arithmeticExpr0 { ArrAssign($1, $3, $6) }
  | SKIP { Skip }
  | command SEMICOLON command { Seq($1, $3) }
  | IFSTART guardedCommand IFEND { If($2) }
  | DOSTART guardedCommand DOEND { Do($2) }

startGuardedCommand: guardedCommand EOF { $1 }
// Level 2: Guarded commands
guardedCommand:
  | booleanExpr0 CONDITION command { Condition($1, $3) }
  | guardedCommand LBRACK RBRACK guardedCommand { Choice($1, $4) }

startBooleanExpr: booleanExpr0 EOF { $1 }

// Boolean expressions
booleanExpr0:
    | booleanExpr0 OR booleanExpr1 { OrExpr($1,$3) }
    | booleanExpr0 OROR booleanExpr1 { OrOrExpr($1,$3) }
    | booleanExpr1 { $1 }
booleanExpr1:
    | booleanExpr1 AND booleanExpr2 { AndExpr($1,$3) }
    | booleanExpr1 ANDAND booleanExpr2 { AndAndExpr($1,$3) }
    | booleanExpr2 { $1 }
booleanExpr2:
    | NOT booleanExpr2 { NotExpr($2) }
    | TRUE { True }
    | FALSE { False }
    | arithmeticExpr0 EQ arithmeticExpr0 { EqExpr($1,$3) }
    | arithmeticExpr0 NEQ arithmeticExpr0 { NeqExpr($1,$3) }
    | arithmeticExpr0 GT arithmeticExpr0 { GtExpr($1,$3) }
    | arithmeticExpr0 GTE arithmeticExpr0 { GteExpr($1,$3) }
    | arithmeticExpr0 LT arithmeticExpr0 { LtExpr($1,$3) }
    | arithmeticExpr0 LTE arithmeticExpr0 { LteExpr($1,$3) }
    | LPAR booleanExpr0 RPAR { $2 }


// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
